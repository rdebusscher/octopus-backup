[[SecurityDataProvider]]

This chapter describes how you can supply the authentication and authorization information to Octopus.

The framework is built around the principal that the developer is responsible for retrieving the information in the correct backed system (like a database or LDAP system) but that there is no code present in the framework to do this.

==== Interface

The interface +SecurityDataProvider+ contains 2 methods which are called by the Octopus framework when information is required.

[source,java]
----
public interface SecurityDataProvider {

    AuthenticationInfo getAuthenticationInfo(AuthenticationToken token);

    AuthorizationInfo getAuthorizationInfo(PrincipalCollection principals);
}
----

==== getAuthenticationInfo()
[[getAuthenticationInfo]]

This method is called whenever the framework needs to verify some authentication information.

+AuthenticationToken+ contains information around authentication. Depending on the authentication method (Login form, tokens, etc) the actual tye of the parameter may vary.  Based on that information, the developer has 2 possible return values:

. *null* means the user name is not known
. *AuthenticationInfo instance* means the user name is found and all the required information is returned to the Octopus framework.

*UsernamePasswordToken* (subclass of +AuthenticationToken+) is defined by Apache Shiro and the +getUsername()+ method returns a _String_ containing the user name specified in the login Form.

For the returned Object, you can use the +AuthenticationInfoBuilder+ to create it for you.

.AuthenticationInfoBuilder methods
. principalId(Serializable) : Each user must be uniquely identified. It will also used by Apache Shiro when the authorization is requested.
. name(String) : The description for the user, like his full name.  This can be used to put on it the screen.
. userName(String) : The user name if you need this for features like re-authentication, auditing and proxy users of Oracle database. (Optional)
. password(Object) : The password for the user name or the hash when hashed passwords are used. See also ??? password mechanism ??? for a more complete explanation, like salted hashed passwords. (required in certain cases)
. externalPasswordCheck() : Defines that we as a developer can't supply the correct password for the username, for example, the case when we use LDAP.
. realmName(String) : name for the realm. Multiple realms are not yet supported by Octopus. (optional)
. salt(Object) : The salt for the hashed password, see _<<Hashed password,hashPassword>> (optional)
. addUserInfo(Serializable, Serializable) : Add additional information about the user that can be used by custom permission voters. (optional)
. addAuthorizationInfo(AuthorizationInfo) : Add authorization info (stored within user info) which will be used to retrieve roles/permission (instead of the getAuthorizationInfo() method)
. build() : Makes the AuthenticationInfo object.


==== getAuthorizationInfo()
[[getAuthorizationInfo]]

The method is called when Octopus needs to know the permissions for a certain user/principal. The parameter of the method contains the principal information for which we need to supply the permission info.

The call to the method +principals.getPrimaryPrincipal()+ returns an instance of +UserPrincipal+, an Octopus class which contains for example the *id* assigned to the user by using the +principalId()+ method from the _AuthenticationInfoBuilder_. It is the link between the 2 method calls.

Based on that unique id for the user, the developer needs to return the authentication info for that user and can make use of the *AuthorizationInfoBuilder* to do so.

.AuthorizationInfoBuilder methods.
. addPermission(NamedPermission) : Add the named permission to the user. It uses the PermissionLookup instance to translate it to an Apache Shiro Domain Permission.
. addPermissions(List<NamedPermission>) : Collection version of the previous method.
. addRole(NamedRole) : Add the named role to the user. It uses the RoleLookup instance to translate it to a simple Apache Shore permission.
. addRoles(List<NamedRole>) : Collection version of the previous method.
. addPermissionAndRoles(List<? extends Permission>) : Adds a list of Apache Shiro Permissions (and thus bypassing Octopus)
. build() : Makes the AuthorizationInfo object.

The calls to this getAuthorizationInfo() method is cached and thus only called once for each user.



