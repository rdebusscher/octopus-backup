One of the classic scenarios is that the users which are allowed to access your application, are stored in a database table.

However, there exists a range of application running on the Oracle database which uses the database users to perform the authentication. With Octopus this is also possible when a stored function is installed on the database (scripts provided in the appendix)

==== Setup

Add the following dependency to your project POM.xml file.

[source,xml]
----
    <dependency>
        <groupId>be.c4j.ee.security.octopus.authentication</groupId>
        <artifactId>octopus-oracle</artifactId>
        <version>0.9.6.1</version>
    </dependency>
----

By adding this dependency, specific configuration options are added and no additional steps are needed.

==== Configuration

As explained in the _<<SecurityDataProvider>>_ chapter, the +getAuthenticationInfo()+ method of the +SecurityDataProvider+ interface is responsible for returning the required data to the Octopus code.
When we are validating the credentials against the schema users of the Oracle database, we are unable to supply the required password for the user to Octopus/Shiro.

In the appendix, you can find a PL/SQL function which is able to verify if a username password combination is valid credentials (they can then also be used to logon to Oracle).
This function is called from the default entityManager defined in your application by a special +CredentialsMatcher+ which is automatically configured.

==== Authentication

Although the check is performed by a special +CredentialMatcher+, the logic isn't executed when we don't indicate that we have a valid user name. So the +getAuthenticationInfo()+ method needs to return an instance of +AuthenticationInfo+.

The following snippet is minimal required code:

[source, java]
----
public AuthenticationInfo getAuthenticationInfo(AuthenticationToken token) {
    if (token instanceof UsernamePasswordToken) {
        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;

        AuthenticationInfoBuilder authenticationInfoBuilder = new AuthenticationInfoBuilder();
        authenticationInfoBuilder.principalId(usernamePasswordToken.getUsername()));

        return authenticationInfoBuilder.build();

    }
    return null;
}
----

But other methods of +AuthenticationInfoBuilder+ can be used to pass information to Octopus/Shiro.

==== Authorization

For authorization purposes, the +getAuthorizationInfo()+ method is still called and you need to return the permissions the user has.  The *principalId* which is supplied to this method is to user name in uppercase.

