This chapter describes the minimal steps you need to do to use the Octopus framework in your application.

=== Add library

Add the octopus artifact to your project dependencies.

[source,xml]
----
    <dependency>
        <groupId>be.c4j.ee.security</groupId>
        <artifactId>octopus</artifactId>
        <version>0.9.3</version>
    </dependency>
----

The Octopus library has a few transient dependencies which are imported automatically. But it also depends on CODI, which is not included by default (see ???here??? for the explaination). For your ease, you can include the complete JSF2 bundle of CODI.

[source,xml]
----
        <dependency>
            <groupId>org.apache.myfaces.extensions.cdi.bundles</groupId>
            <artifactId>myfaces-extcdi-bundle-jsf20</artifactId>
            <version>1.0.5</version>
        </dependency>

        <!-- logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.6.4</version>
        </dependency>
----

In the above snippet, you see also that there is also a logging target required for SLF4J.  You can of course include another bridge like the one for log4j.

=== Non Maven users

???
TODO

=== URL patterns protection

By just adding the Octopus jar file and his dependencies, your application no longer deploys.  It complains that it is missing a CDI bean which implements the +SecurityDataProvider+ interface.
This bean is required to supply the authentication and authorization information to the Octopus framework. See ???configuring authentication??? and ???configuring authorization??? for the details how you can do this.

Another thing you need to do before you can start, is to create the +/WEB-INF/securedURLs.ini+ file.
In this file, you can configure which URLs need to be protected by authentication.  An example is in the following snippet

----
   /pages/** = user
----

It makes sure that all the pages within the +pages+ directory and subdirectory can't be accessed without proper authentication.  All other pages in the root or in other directories can be viewed anonymous.

+user+ is the predefined filter by Octopus/shiro that requires authentication.  The other predefined filter is called +anon+ for anonymous access.  See also ??? how you can define other filters based on named permissions and named roles.

=== Login form

Whenever a user navigates to an URL which needs authentication (and he isn't already authenticated) the login form is shown.  By default this is +/login.xhtml+ JSF page.
You can use a regular JSF page for this purpose and there is no restrictions on layout, structure or component library which is used.

[source,xml]
----
    <h:form id="login">
        <h:panelGrid columns="2">
            <p:outputLabel for="username" value="Username:"/>
            <p:inputText id="username" value="#{loginBean.username}" required="true"/>

            <p:outputLabel for="password" value="Password:"/>
            <p:password id="password" value="#{loginBean.password}" required="true" feedback="" />

            <h:panelGroup/>
            <p:commandButton value="Login" actionListener="#{loginBean.doLogin}" update="@form" process="@form"/>

        </h:panelGrid>
        <p:messages />
    </h:form>
----

In the above example, the login page is designed with PrimeFaces. Basically, there are 3 important things

.Requirements
. The user name must be bound to the +username+ attribute of the +loginBean+ like in _value="#{loginBean.username}"_
. The password must be bound to the +password+ attribute, like in _value="#{loginBean.password}"_
. The actual authentication cen be performed by calling the method +doLogin()+ by an actionListener, like the _p:commandButton_

=== Named Permissions or/and named Roles

We are now at the point that the authentication works, the next thing is the authorization we need to provide.  As specified in the features chapter, the named permissions (and named roles) can be defined by using enumeration constants to make it more typesafe.

As the benefit of Octopus lies in the fact that you can use permissions, we will discuss only permissions in this section. see ??? (for named roles)

For the named permissions, we can create an enum java class to define the the values. An example could be

[source,java]
----
public enum DemoPermission implements NamedPermission {
    DEPARTMENT_READ, EMPLOYEE_READ_INFO // and other values
}
----

Since enum classes can't be extended, we can't define an empty class within the octopus framework that you can extend.  Therefor you need to specify the java class where you have defined the constants for the named permission in a configuration file.  This configuration file, named +octopusConfig.properties+, must be located in the class root (If you are using Maven, you can place it in the +src+main/resources+ directory)

[source,java]
----
namedPermission.class = be.c4j.demo.security.permission.DemoPermission
namedPermissionCheck.class = be.c4j.demo.security.permission.DemoPermissionCheck
----

In the above example of the configuration file, you see also that we have defined a class which can be used to annotate methods in order to verify if the user has the required permission to execute the method. the _namedPermissionCheck_ class must be an annotation which accepts constants of our defined enum, as shown below.

[source,java]
----
@Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
public @interface DemoPermissionCheck {
    DemoPermission[] value();
}
----

==== Mapping named permissions to domain permissions Apache Shiro

Since Apache Shiro works with domain permissions and the verification of the fact that the user has the appropriate rights is performed by Shiro, We need to supply some mapping btween the domain permission and the named permission of Octopus which are the enum constants.

The PermissionLookup class is designed to do this and an instance of it can be created by the following code.

[source,java]
----
    @ApplicationScoped
    @Produces
    public PermissionLookup<DemoPermission> buildLookup() {

        List<NamedDomainPermission> allPermissions = permissionService.getAllPermissions();
        return new PermissionLookup<DemoPermission>(allPermissions, DemoPermission.class);
    }
----

The constructor takes a list of named permissions and the enum class which contains the type safe variants.  Octopus is using this class whenever it needs to supply a domain permission to Apache Shiro and the user has used the enum constant.

=== Secure EJB methods

Since EJB methods are the gate to your data, it is advisable that you put security on all your methods to make sure that your data is protected and that only those persons who have the required permissions can perform the actions you assigned them.

Octopus is designed to put security on all EJB methods by simply putting following snippet in the ejb-jar.xml file (placed in the WEB-INF directory).

[source,xml]
----
    <interceptors>
        <interceptor>
            <interceptor-class>be.c4j.ee.security.interceptor.OctopusInterceptor</interceptor-class>
        </interceptor>
    </interceptors>
    <assembly-descriptor>
        <interceptor-binding>
            <ejb-name>*</ejb-name>
            <interceptor-class>be.c4j.ee.security.interceptor.OctopusInterceptor</interceptor-class>
        </interceptor-binding>
    </assembly-descriptor>
----

By putting this into the file, any EJB method call will now fail with the exception

----
Caused by: be.c4j.ee.security.exception.OctopusUnauthorizedException: No Authorization requirements available
----

Now you can start adding some annotations which defines the required permissions to execute the EJB method or all methods of the EJB class.
In the chapter ??? there is an extensive listing of all the possibilities but this are a few common ones:

. @PermitAll, for those cases where also anonymous access is required as for instance the methods which reads user information (like password) and permissions for the user.
. @RequiresUser, if it is enough that the user is authenticated. So when no specific permission is required.
. @DemoPermissionCheck(DemoPermission.DEPARTMENT_CREATE), as an example of the use of the custom annotation to impose your named permission. The name of the annotation is of course free to choose and is supplied to Octopus in the _octopusConfiguration.properties_ file (see also above)

=== Securing JSF components

The third type of artifacts where you can impose security on, are the JSF components.  By using a renderer interceptor mechanism (borrowed for Apache MyFaces Extensions Validation framework), Octopus is able to disable the rendering of components in declarative way.

The next example shows how you can secure a PrimeFaces button so that only users with the *DEPARTMENT_CREATE* permission can see it.

[source,xml]
----
   <p:button value="Create" outcome="/pages/departmentCreate.xhtml">
       <sec:securedComponent permission="DEPARTMENT_CREATE"/>
   </p:button>
----

So you don't need to fiddle with the rendered attribute to achieve the desired effect.  You can add a tag inside the component, any component not only PrimeFaces, to secure the parent.
Internally the rendered attribute is used, so the button is also not available on the screen in any hidden form to reduce the risks.