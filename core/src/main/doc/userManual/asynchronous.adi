
=== Support for the EJB @Asynchronous

Since the creation of the threads to support the asynchronous execution of the EJB methods annotated with @Asynchronous is done deep in the application server code, we need to use a small hack in order to propagate the security information to the new thread.

The EJB a synchronous method call can be coded like this,

[source,java]
----

    @Asynchronous
    @OctopusPermissions("demo:*:*")
    public Future<String> doInBackground(OctopusSecurityContext securityContext) {

----

Important here is that we have the OctopusSecurityContext as a parameter. Any security permission verification, like @OctopusPermissions, can be used to mandate certain authorization requirements.

The calling of this asynchronous EJB method needs to be coded like this

[source,java]
----

   @Inject
   private OctopusSecurityContext octopusSecurityContext;

   public void someMethod() {
      octopusSecurityContext.prepareForAsyncUsage();
      Future<String> futureResult = xxx.doInBackground(octopusSecurityContext);
      ...
   }

----

the +prepareForAsyncUsage()+ stores the necessary information into the octopusSecurityContext instance (this CDI bean is defined as Dependent, so every injection gets his own copy). The OctopusInterceptor, which is executed due to the definition within the ejb-jar.xml (see ???), retrieves this security information from the parameter of the method and then performs the required checks.

=== Handling authorization exceptions

The regular handling of the authorization checks can not be applied for Asynchronous method calls.

Since the method execution is asynchronous, the response is probably already sent to the user at the time the authentication issue occurs.

So the developer is responsible for handling the Exception within a custom JSF Exception handler for example.

When the OctopusInterceptor finds that there is an issue with the authorization requirements (like the current user/Subject doesn't have the demo:*:* permissions in the above example) an EJBExfeption is thrown with +OctopusUnauthorizedException+ as +causedByException+

