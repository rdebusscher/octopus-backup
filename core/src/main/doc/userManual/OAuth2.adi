==== setup

Add the following dependency to your project POM.xml file.

[source,xml]
----
    <dependency>
        <groupId>be.c4j.ee.security.octopus.authentication</groupId>
        <artifactId>octopus-oauth2-google</artifactId>
        <version>0.9.7</version>
    </dependency>
----

The above dependency add the required dependency to have OAuth2 authentication with Google as provider.

But other providers are also supported, this table gives an overview of the provider, artifactId and name (see further)

[options="header"]
|=======================
|OAuth2 Provider|artifactId |name
|Google    |octopus-oauth2-google     |Google
|GitHub    |octopus-oauth2-github  |Github
|LinkedIn    |octopus-oauth2-linkedin    |Linkedin
|Octopus    |octopus-oauth2-octopus    |Octopus
|=======================

And if you like, you can add multiple OAuth2 modules, so that the end user of your application can choose which provider he wants to use. See in the configuration, what you need to do in order to make this scenario work.

==== Configuration

For each OAuth2 provider, we need to specify the +clientId+ and +clientSecret+ code that we received from the provider. This needs to be done in the +octopusConfig.properties+ file.

----
OAuth2.clientId=??????????.apps.googleusercontent.com
OAuth2.clientSecret=???????????????
----

Since the authentication part is done externally, the functionality of the +SecurityDataProvider.getAuthenticationInfo()+ method is a bit different.

The type of the parameter token is of a special type, +OAuth2User+. Your implementation should check on this type to make sure that the authentication did go well.

The type has specific getters for certain properties, like id and email, which are provided by most providers. All the other information which is collected (see ???) can be retrieved by looking into the _userInfo_ map.

A typical implementation of the method looks like this.

[source,java]
----
@Override
public AuthenticationInfo getAuthenticationInfo(AuthenticationToken token) {

    if (token instanceof OAuth2User) {
        OAuth2User user = (OAuth2User) token;

        AuthenticationInfoBuilder authenticationInfoBuilder = new AuthenticationInfoBuilder();
        authenticationInfoBuilder.principalId(user.getId()).name(user.getFullName());
        authenticationInfoBuilder.addUserInfo(user.getUserInfo());

        return authenticationInfoBuilder.build();
    }
    return null;
}
----

Of course, you can do additional things here and also limit who can access your application.

In the case where you have build an application which should only be used by the employees of your company (which are using for example Google for work and thus have all a Google account) you can verify the email domain of the logged in user to check if the authenticated user belongs to your company (OAuth2User.getEmail() ).
In the case the user isn't allowed access to your app, you can just return _null_ as the result of the getAuthenticationInfo() method.

==== Additional configuration

There are additional configuration options possible.

For example, in the case where you use the Provider not only for the authentication but also want to use additional services of the provider (like retrieving the number of repositories of the user from GitHub, the connections on Google+ or LinkedIn, etc...) you need to specify additional scopes during the authentication so that the end user is aware of what your application will do when they authorize.

The OAuth2 scope defines the type of information your application will able to read from the provider when to end user approves it. And those scope names are specific for each provider and thus can't be standardized with Octopus or any other framework.

You are able to specify those scopes which needs to be added to the default one(s) (which Octopus already defines to be able to read basic information like email address and name of the user) in the +octopusConfiguration.proeprties+ file.

For example, the next snippet shows the config to be able to read the Google+ information for the circles of the user.

----
OAuth2.scopes=https://www.googleapis.com/auth/plus.circles.read
----

The Octopus module has additional configration properties and possibilities.

Since the Octopus SSO Server artifact can be used to create your own implementation of a compliant OAuth2/OpenIdConnect server, you need to specify the URL where the server is located which you want to use for authentication/Authoriazation. This is achieved with the _octopus.server_ configuration parameter.

Within the Octopus Server, the developers have also defined the root for the JAX-RS endpoint containing the User endpoint. That value needs to be specifiued by the parameter _octopus.data.endpoint.root_.

The Octopus server by default returns only the username and email address of the logged in user. There is a special scope supported, called _userinfo_, which returns alls the information specified by the developers withiun the userInfo map when they created the AuthenticationInfoBuilder. You can specify that the information must be returned by defining the _OAuth2.scopes_ parameter in the configuration with the value _userinfo_.

==== Using multiple providers

You can use multiple OAuth2 providers and let the user select the one (s)he want to use for the authentication of your application.

The first step is add the different modules to your application as dependency. Octopus identifies that there are multiple providers on the classpath and when the end users want to access a protected resource, Octopus shows the page identified in the configuration parameter +OAuth2.provider.selectionPage+ so that the end user can make the selection of the provider (s)he wants to use.

This selection page must be provided by the application developer and all the available providers can be retrieved from +defaultOauth2ServletInfo.providers+ EL Expression. _defaultOauth2ServletInfo_ is a CDI bean defined by Octopus which helps the application developer to deal with multiple OAuth2 providers. Below is an example of a simple selection screen.

[source, xhtml]
----
    <ui:repeat value="#{defaultOauth2ServletInfo.providers}" var="_provider">
        <p:commandLink actionListener="#{defaultOauth2ServletInfo.authenticateWith(_provider)}" value="#{_provider}"/>
        <br/>
    </ui:repeat>
----

The +getProviders()+ method returns a List of String's of the OAuth2 providers found on the classpath. The names corresponds to the one listed here ??? The application developer is of course free how the selection screen is structured and what information is shown to help the user to select the provider of his choice. The only requirement he has, is that the method +authenticateWith(String)+ is called so that the correct provider selection can be stored and the authentication flows proceeds correctly to the initially requested page.

The last thing we need to do is to specify the correct _clientId_ and _secretId_ for the different providers (within the _octopusConfig.properties_ file). In the case you need to specify multiple values, you need to use the name profix to the OAuth2 configuration parameter so that Octopus can use the correct one depending on the provider selected by the end user.

----
# Google
Google.OAuth2.clientId=25208181163-ekbphgh4s9k3f78g3j3lfulqcd9p7a1l.apps.googleusercontent.com
Google.OAuth2.clientSecret=yGKzScuRFm90pR0pNWOedDRx

# GitHub
Github.OAuth2.clientId=271f8e3eacb955487e92
Github.OAuth2.clientSecret=26a3030a10e742e4edf4a0496ee707fdfd18cf4b

# Linkedin
Linkedin.OAuth2.clientId=771a48ph3b53xt
Linkedin.OAuth2.clientSecret=CM5ekYbsZR6y0smD
----

The above snippet comes from the multiple OAuth2 provider demo application where we specify the _clientId_ and _secretId_ fror the 3 providers.


==== Configuration of the OAuth2 provider

This section contains briefly how the OAuth2 authentication on the provider side can be set up. However, this information and requested data can change as it is not under the control of Octopus.

===== Google

. Go the the https://console.developers.google.com/[developers console] of Google.
. Select the _Create new project_ option from the drop down of project on the menu bar on top of the screen.
. Specify a name (only used to identify the project in the console later on) and click the _Create_ button.
. _Select the API manager_ menu option on the side bar (can be hidden, click on the 'Hamburger' icon - The icon with the 3 horizontal lines)
. Add and enable the _Google+ API_. Other API's can be removed for Octopus.
. Go to the _Credentials_ menu and select the _OAuth Client ID_ as new Credential.
. Configure the consent screen (most things are optional).
. Select _Web Application_ as application type.
. Specify the redirect URI  <hostname>/<root>/oauth2callback and <hostname> as _Authorized JavaScript origins_
. Note down the client-id and client secret values.

====== Multiple accounts

When the user has multiple accounts of Google, there is the possibility to have a selection screen which account he wants to use every time he logs on to the application.

He can call the +/usingMultipleAccounts+ URL with the parameter +value=true+. The next time Octopus calls the Google OAuth2 provider, an additional parameter is sent to indicate that Google needs to show the account selection screen. Also when the user is only logged in with one account or even has only one account.

You can disable this feature again by calling the servlet with a +value=false+ which makes sure the cookie is removed.

The developer can customize the screen which is shown when the user calls the +/usingMultipleAccounts+ URL by implementing the +MultipleAccountContent+ interface and annotating it with a CDI scope (preferably ApplicationScoped).

===== Github

. Go the Developer application page of https://github.com/settings/applications[Githib] by selecting the tab _Developer applciations_.
. Click on the _Register new application_ button.
. Define the application name, Authorization callback URL (as <hostname>/<root>/oauth2callback) and the other information
. Click on the _register application_ button and note down the client-id and client secret values.

===== LinkedIn

. Go to the https://www.linkedin.com/developer/apps[application overview page] of your linked in account.
. Click on the _Create application_ button.
. You have to fill in quite some fields. The _Application use_ drop down can be _Other_ if you just use it jsut for the authentication step.
. We need the scopes _r_emailaddress_ and _r_basicprofile_
. Note down the client-id and client secret values.




