==== Setup

No additional dependencies are required to support password authentication against an LDAP server.

However, we need a specific Matcher (provided by Octopus since v0.9.7.2) that will check the supplied username and passwords against an LDAP instance. That matcher needs to be configured within a +shiro_extra.ini+ file. (Or specified within another ini file but then you need to specify that name in the config)

----
[main]
LDAPMatcher = be.c4j.ee.security.credentials.ldap.LDAPCredentialsMatcher
credentialsMatcher.matcher = $LDAPMatcher
----

Quite a lot of configuration parameters can be configured for LDAP, the only one which is required is the URL where the LDAP server can be contacted.

----
ldap.url=ldap://localhost:33389/
----

For the other configuration parameters, see the Configuration section.

==== SecurityDataProvider.getAuthenticationInfo()

We need to define a login form our self, and the +getAuthenticationInfo()+ method of the bean implementing the +SecurityDataProvider+ interface will be called with an instance of +UsernamePasswordToken+.

However, we are unable to supply the correct password for the user to Octopus/Shiro but need to pass them to an LDAP instance. So we have an _external password check_ and thus we need the following snippet in the +getAuthenticationInfo()+ method.

[source,java]
----
public AuthenticationInfo getAuthenticationInfo(AuthenticationToken token) {

    if (token instanceof UsernamePasswordToken) {

        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;

        AuthenticationInfoBuilder authenticationInfoBuilder = new AuthenticationInfoBuilder();
        // principalId is used for the authorization
        authenticationInfoBuilder.principalId(usernamePasswordToken.getUsername());

        // This means we have to rely on an additional defined CredentialsMatcher
        authenticationInfoBuilder.externalPasswordCheck();

        return authenticationInfoBuilder.build();
    }

    return null;

}
----

==== Authorization

It is possible to retrieve the groups a user is assigned with the LDAP option here defined.

The LDAP credential matcher can also retrieve the groups for the user from LDAP and supply it to Octopus with the new option which passes AuthorizationInfo together with the AuthenticationInfo.

To activate it, set the configuration parameter to **GROUPS** (when user is defined at the group with the _member_ attribute) or **CALLER** (when groups are defined at the user with the _memberOf_ attribute)

----
ldap.groups.loaded=GROUPS
----

See the other LDAP configuration properties how you can define the group filter, attributes names, etc ...

The group names are passed as roles to the AuthorizationInfoBuilder.  You can use them as roles within Octopus, or when you have defined an **RolePermissionResolver** they are converted to _permissions_
