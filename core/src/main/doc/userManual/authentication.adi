[[authentication]]

This chapter describes the details for integrating the authentication part into your application.

There are several authentication methods supported in Octopus. We can categorize them into 3 groups.

. Octopus is able to verify if the user-supplied credentials (user name - password combination) is valid. For example Database and File based storages.
. Octopus passes the user-supplied credentials (user name - password combination) to an external source for verification. For example LDAP.
. Authentication is 'externalised' and application is contacted with a token. Examples are Google OAuths, CAS, SAML, Keycloak, Octopus SSO, etc.

*Octopus verifies*

In this case, we need to supply the password using the +AuthenticationInfoBuilder+ to Octopus(Apache shiro). The defaults matchers (There is also support for hashed password, see _<<Hashed password,hashPassword>>) are able then to verify if the password matches.

*External validation*

In case we can't supply Octopus/Apache Shiro the password, but user has entered credentials in our application, we can ask for an external authentication and supply a correct _Matcher_ which calls the external validation.

*External authentication*

When the user enters the credentials in an external system and the verification also happens there, we need special handling for receiving the token which identifies the authenticated user. In those cases, there is also a special _Matcher_.

*Summary*

In the below table, one can see which of the 3 options applies to your situation.

[options="header"]
|=======================
|Credential entry|Credential verification |Type
|Application    |Application     |Octopus Verifies
|Application    |External| External validation
|External    |External    |External authentication
|=======================


==== CDI bean for authentication and authorization

As described in the chapter _<<SecurityDataProvider,SecurityDataProvider>>_, there is an interface defined in Octopus framework which you need to implement to supply the required security data to the framework.

So you should create a class which implements this interface and annotate it with +@javax.enterprise.context.ApplicationScoped+. That way, an instance of your class will be used by Octopus when it needs authentication info.  The same bean will be used for the authorization info and will be described in _<<authorization,Authorization>>_ chapter.

==== Supply authentication info

Some details about the +getAuthenticationInfo()+ method is described in the section _<<getAuthenticationInfo,getAuthenticationInfo()>>_. Since you have defined a CDI bean, you can inject any kind of service that you wrote to supply the required information.

When the user specifies an unknown user name, the +getAuthenticationInfo()+ should return null.  Octopus knows then, that it should show an error. More on the configuration of the error messages, see ???.

In case your custom service identifies the user name as valid, you should supply some data.

. A unique id which will be used to refer to this user.
. A password for the user.
. The salt in case of hashed passwords

The password verification is done by the framework itself because the preferred password mechanism is using some kind of hashed password mechanism.  The code to perform such comparisons is called by the Framework itself.  You just have to specify the hash algorithm (through configuration), salt (for optimal security) and the hashed password to be able to perform the comparison.  See also ??? password mechanism ?? for some more detail.

The result of the method call is not cached by default, and thus it is safe to change the authentication info in the external system (like database or LDAP) without the need to restart the application.

==== Example

In the below code, you find an example of supplying the authentication info when the external system stores the plain passwords (not recommended).

[source,java]
----
@ApplicationScoped
public class AppAuthentication implements SecurityDataProvider {

    @Inject
    private YourService service;

    @Override
    public AuthenticationInfo getAuthenticationInfo(AuthenticationToken token) {

        if (token instanceof UsernamePasswordToken) {
           UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken)token;

           MyUser user = service.getUserInfo(usernamePasswordToken.getUsername());
           if (user == null) {
              return null;
           }
           AuthenticationInfoBuilder authenticationInfoBuilder =
              new AuthenticationInfoBuilder();
           authenticationInfoBuilder.principalId(user.getId()).
                                   name(user.getName()).
                                   password(user.getPassword());
           return authenticationInfoBuilder.build();
        }
        return null; // Did we use some other authentication method?
    }

    @Override
    public AuthorizationInfo getAuthorizationInfo(PrincipalCollection principals) {

    }

}
----

+YourService+ and +MyUser+ class are project specific and not supplied by Octopus.

==== Using external checking

When you as developer can't supply Octopus with the username and password information, there exists 2 other mechanisms. See also _<<Authentication methods,AuthMethods>>_.

For example, when the password is only available in an external system, like LDAP, you need to use the +externalPasswordCheck()+ method and a specific +Matcher+ to validate the username and password.
An example can be found ???here???

You can go even further and the complete authentication (checking if the user specified the correct user name and password combination) can be handled externally by a third party system using OAuth2, CAS, SAML, etc ...
Specific extensions are designed to work with these system and examples are described ???here???

==== Remember-me

When the _rememberMe_ flag is set within the _UsernamePasswordToken_ instance, a cookie is generated which contains the Principal information in a encrypted serialized form.

The encryption, done with the AES algorythm, makes it sure that, although it is shared with the browser, the contents is save.

When no specific encryption key is specified within the configuration (parameter _rememberme.cookie.cipherKey_), a key is generated each tie the application is deployed. This will result in cookie information which becomes unuseable. So make sure you set a value which can be generated with

[source,java]
----
    public static void main(String[] args) {
        SecureRandom secureRandom = new SecureRandom();
        byte[] key = new byte[16];
        secureRandom.nextBytes(key);

        System.out.println(Base64.encodeToString(key));
    }
----

For versions prior to 0.9.7.2, the configuration can only be done from within a _shiro_extra.ini_ file. For an example, see the example in this https://rdebusscher.gitbooks.io/octopus-cookbook/content/chapter-7.html[example - section 7.4.1]

==== Java SE support

===== CAS

TODO

Important, don't forget to call +CasSEConfiguration.prepareConfiguration()+ to initialize the configuration system properly.

===== KeyCloak

===== Password grant type of Octopus Server (OAuth2 compatible)